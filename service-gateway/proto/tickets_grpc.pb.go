// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/tickets.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TicketService_CreateTicket_FullMethodName             = "/ticket.TicketService/CreateTicket"
	TicketService_GetTicket_FullMethodName                = "/ticket.TicketService/GetTicket"
	TicketService_UpdateTicket_FullMethodName             = "/ticket.TicketService/UpdateTicket"
	TicketService_DeleteTicket_FullMethodName             = "/ticket.TicketService/DeleteTicket"
	TicketService_GetActiveTicketsByUser_FullMethodName   = "/ticket.TicketService/GetActiveTicketsByUser"
	TicketService_AddMessageToTicket_FullMethodName       = "/ticket.TicketService/AddMessageToTicket"
	TicketService_AddMessageToActiveTicket_FullMethodName = "/ticket.TicketService/AddMessageToActiveTicket"
	TicketService_GetTicketMessages_FullMethodName        = "/ticket.TicketService/GetTicketMessages"
	TicketService_GetAllTickets_FullMethodName            = "/ticket.TicketService/GetAllTickets"
)

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	// Create a new ticket
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	// Get ticket by ID
	GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	// Update existing ticket
	UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	// Delete ticket
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*DeleteTicketResponse, error)
	// Get active tickets by user
	GetActiveTicketsByUser(ctx context.Context, in *GetActiveTicketsByUserRequest, opts ...grpc.CallOption) (*GetActiveTicketsByUserResponse, error)
	// Add message to ticket by ID
	AddMessageToTicket(ctx context.Context, in *AddMessageToTicketRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	// Add message to active ticket by user
	AddMessageToActiveTicket(ctx context.Context, in *AddMessageToActiveTicketRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	// Get messages for ticket
	GetTicketMessages(ctx context.Context, in *GetTicketMessagesRequest, opts ...grpc.CallOption) (*GetTicketMessagesResponse, error)
	// Get all tickets from database
	GetAllTickets(ctx context.Context, in *GetAllTicketsRequest, opts ...grpc.CallOption) (*GetAllTicketsResponse, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, TicketService_CreateTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, TicketService_GetTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, TicketService_UpdateTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*DeleteTicketResponse, error) {
	out := new(DeleteTicketResponse)
	err := c.cc.Invoke(ctx, TicketService_DeleteTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetActiveTicketsByUser(ctx context.Context, in *GetActiveTicketsByUserRequest, opts ...grpc.CallOption) (*GetActiveTicketsByUserResponse, error) {
	out := new(GetActiveTicketsByUserResponse)
	err := c.cc.Invoke(ctx, TicketService_GetActiveTicketsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) AddMessageToTicket(ctx context.Context, in *AddMessageToTicketRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, TicketService_AddMessageToTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) AddMessageToActiveTicket(ctx context.Context, in *AddMessageToActiveTicketRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, TicketService_AddMessageToActiveTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketMessages(ctx context.Context, in *GetTicketMessagesRequest, opts ...grpc.CallOption) (*GetTicketMessagesResponse, error) {
	out := new(GetTicketMessagesResponse)
	err := c.cc.Invoke(ctx, TicketService_GetTicketMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetAllTickets(ctx context.Context, in *GetAllTicketsRequest, opts ...grpc.CallOption) (*GetAllTicketsResponse, error) {
	out := new(GetAllTicketsResponse)
	err := c.cc.Invoke(ctx, TicketService_GetAllTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	// Create a new ticket
	CreateTicket(context.Context, *CreateTicketRequest) (*TicketResponse, error)
	// Get ticket by ID
	GetTicket(context.Context, *GetTicketRequest) (*TicketResponse, error)
	// Update existing ticket
	UpdateTicket(context.Context, *UpdateTicketRequest) (*TicketResponse, error)
	// Delete ticket
	DeleteTicket(context.Context, *DeleteTicketRequest) (*DeleteTicketResponse, error)
	// Get active tickets by user
	GetActiveTicketsByUser(context.Context, *GetActiveTicketsByUserRequest) (*GetActiveTicketsByUserResponse, error)
	// Add message to ticket by ID
	AddMessageToTicket(context.Context, *AddMessageToTicketRequest) (*MessageResponse, error)
	// Add message to active ticket by user
	AddMessageToActiveTicket(context.Context, *AddMessageToActiveTicketRequest) (*MessageResponse, error)
	// Get messages for ticket
	GetTicketMessages(context.Context, *GetTicketMessagesRequest) (*GetTicketMessagesResponse, error)
	// Get all tickets from database
	GetAllTickets(context.Context, *GetAllTicketsRequest) (*GetAllTicketsResponse, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) CreateTicket(context.Context, *CreateTicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedTicketServiceServer) GetTicket(context.Context, *GetTicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (UnimplementedTicketServiceServer) UpdateTicket(context.Context, *UpdateTicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedTicketServiceServer) DeleteTicket(context.Context, *DeleteTicketRequest) (*DeleteTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedTicketServiceServer) GetActiveTicketsByUser(context.Context, *GetActiveTicketsByUserRequest) (*GetActiveTicketsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTicketsByUser not implemented")
}
func (UnimplementedTicketServiceServer) AddMessageToTicket(context.Context, *AddMessageToTicketRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessageToTicket not implemented")
}
func (UnimplementedTicketServiceServer) AddMessageToActiveTicket(context.Context, *AddMessageToActiveTicketRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessageToActiveTicket not implemented")
}
func (UnimplementedTicketServiceServer) GetTicketMessages(context.Context, *GetTicketMessagesRequest) (*GetTicketMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketMessages not implemented")
}
func (UnimplementedTicketServiceServer) GetAllTickets(context.Context, *GetAllTicketsRequest) (*GetAllTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTickets not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicket(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).UpdateTicket(ctx, req.(*UpdateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_DeleteTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetActiveTicketsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveTicketsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetActiveTicketsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetActiveTicketsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetActiveTicketsByUser(ctx, req.(*GetActiveTicketsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_AddMessageToTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMessageToTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).AddMessageToTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_AddMessageToTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).AddMessageToTicket(ctx, req.(*AddMessageToTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_AddMessageToActiveTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMessageToActiveTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).AddMessageToActiveTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_AddMessageToActiveTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).AddMessageToActiveTicket(ctx, req.(*AddMessageToActiveTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetTicketMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketMessages(ctx, req.(*GetTicketMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetAllTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetAllTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetAllTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetAllTickets(ctx, req.(*GetAllTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _TicketService_CreateTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _TicketService_GetTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _TicketService_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _TicketService_DeleteTicket_Handler,
		},
		{
			MethodName: "GetActiveTicketsByUser",
			Handler:    _TicketService_GetActiveTicketsByUser_Handler,
		},
		{
			MethodName: "AddMessageToTicket",
			Handler:    _TicketService_AddMessageToTicket_Handler,
		},
		{
			MethodName: "AddMessageToActiveTicket",
			Handler:    _TicketService_AddMessageToActiveTicket_Handler,
		},
		{
			MethodName: "GetTicketMessages",
			Handler:    _TicketService_GetTicketMessages_Handler,
		},
		{
			MethodName: "GetAllTickets",
			Handler:    _TicketService_GetAllTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tickets.proto",
}
