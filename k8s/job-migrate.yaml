apiVersion: batch/v1
kind: Job
metadata:
  name: migrate-db
spec:
  template:
    spec:
      containers:
        - name: migrate
          image: migrate/migrate
          args:
            - -path=/migrations
            - -database=postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?sslmode=disable
            - up
          env:
            - name: POSTGRES_HOST
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_DB
              value: service_tickets
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: migrations
              mountPath: /migrations
      volumes:
        - name: migrations
          configMap:
            name: migrations-config
      restartPolicy: Never
  backoffLimit: 4
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: migrations-config
data:
  "000001_create_tickets_table.up.sql": |
    CREATE TABLE IF NOT EXISTS tickets (
        id VARCHAR(36) PRIMARY KEY,
        status VARCHAR(50) NOT NULL,
        "user" VARCHAR(255) NOT NULL,
        agent VARCHAR(255),
        problem_id BIGINT,
        vertical_id BIGINT,
        skill_id BIGINT,
        user_group_id BIGINT,
        channel VARCHAR(50) NOT NULL,
        created_at TIMESTAMP NOT NULL,
        updated_at TIMESTAMP NOT NULL
    );

    -- Add indexes for frequently queried fields
    CREATE INDEX IF NOT EXISTS idx_tickets_status ON tickets(status);
    CREATE INDEX IF NOT EXISTS idx_tickets_user ON tickets("user");
    CREATE INDEX IF NOT EXISTS idx_tickets_agent ON tickets(agent);
    CREATE INDEX IF NOT EXISTS idx_tickets_problem_id ON tickets(problem_id);
    CREATE INDEX IF NOT EXISTS idx_tickets_vertical_id ON tickets(vertical_id);
    CREATE INDEX IF NOT EXISTS idx_tickets_skill_id ON tickets(skill_id);
    CREATE INDEX IF NOT EXISTS idx_tickets_user_group_id ON tickets(user_group_id);
    CREATE INDEX IF NOT EXISTS idx_tickets_channel ON tickets(channel);
    CREATE INDEX IF NOT EXISTS idx_tickets_created_at ON tickets(created_at);
    CREATE INDEX IF NOT EXISTS idx_tickets_updated_at ON tickets(updated_at);
  "000001_create_tickets_table.down.sql": |
    DROP TABLE IF EXISTS tickets;
  "000002_create_messages_table.up.sql": |
    CREATE TABLE IF NOT EXISTS messages (
        id VARCHAR(36) PRIMARY KEY,
        ticket_id VARCHAR(36) NOT NULL,
        from_address VARCHAR(255) NOT NULL,
        to_address VARCHAR(255) NOT NULL,
        subject TEXT,
        body TEXT,
        channel VARCHAR(20) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE
    );

    -- Add indexes for frequently queried fields
    CREATE INDEX IF NOT EXISTS idx_messages_ticket_id ON messages(ticket_id);
    CREATE INDEX IF NOT EXISTS idx_messages_from_address ON messages(from_address);
    CREATE INDEX IF NOT EXISTS idx_messages_to_address ON messages(to_address);
    CREATE INDEX IF NOT EXISTS idx_messages_channel ON messages(channel);
    CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);
  "000002_create_messages_table.down.sql": |
    DROP TABLE IF EXISTS messages;
  "000003_create_configs_schema.up.sql": |
    -- Create schema for configurations
    CREATE SCHEMA IF NOT EXISTS configs;

    -- Create table for storing configuration versions
    CREATE TABLE IF NOT EXISTS configs.config_versions (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        version VARCHAR(50) NOT NULL,
        content JSONB NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        created_by VARCHAR(255) NOT NULL,
        is_active BOOLEAN DEFAULT true,
        UNIQUE(name, version)
    );

    -- Add indexes for frequently queried fields
    CREATE INDEX IF NOT EXISTS idx_config_versions_name ON configs.config_versions(name);
    CREATE INDEX IF NOT EXISTS idx_config_versions_version ON configs.config_versions(version);
    CREATE INDEX IF NOT EXISTS idx_config_versions_created_at ON configs.config_versions(created_at);
    CREATE INDEX IF NOT EXISTS idx_config_versions_is_active ON configs.config_versions(is_active);

    -- Add trigger to automatically update updated_at
    CREATE OR REPLACE FUNCTION configs.update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    CREATE TRIGGER update_config_versions_updated_at
        BEFORE UPDATE ON configs.config_versions
        FOR EACH ROW
        EXECUTE FUNCTION configs.update_updated_at_column();
  "000003_create_configs_schema.down.sql": |
    DROP TRIGGER IF EXISTS update_config_versions_updated_at ON configs.config_versions;
    DROP FUNCTION IF EXISTS configs.update_updated_at_column();
    DROP TABLE IF EXISTS configs.config_versions;
    DROP SCHEMA IF EXISTS configs;
  "000004_insert_initial_workflow.up.sql": |
    -- Insert initial workflow configuration
    INSERT INTO configs.config_versions (
        id,
        name,
        version,
        content,
        created_by
    ) VALUES (
        gen_random_uuid(),
        'SimpleWorkflow',
        '1.0',
        '{
            "name": "SimpleWorkflow",
            "version": "1.0",
            "states": [
                {
                    "name": "GetOrCreateTicket",
                    "type": "activity",
                    "activityName": "GetOrCreateTicketActivity",
                    "input": ["$.input.Message"],
                    "output": "ticket",
                    "outputSchema": {"type": "object"}
                },
                {
                    "name": "AddInitialMessage",
                    "type": "activity",
                    "activityName": "AddMassageToTicketActivity",
                    "input": ["$.input.Message", "$.ticket.Id"],
                    "outputSchema": {"type": "object"}
                },
                {
                    "name": "MessageListener",
                    "type": "signal",
                    "signalName": "NewMessage",
                    "actions": [
                        {
                            "type": "activity",
                            "activityName": "AddMassageToTicketActivity",
                            "input": ["$.signalPayload", "$.ticket.Id"],
                            "outputSchema": {"type": "object"}
                        }
                    ],
                    "concurrent": true
                },
                {
                    "name": "ClassifyTicket",
                    "type": "activity",
                    "activityName": "ClassifierAcitivity",
                    "input": "$.ticket",
                    "output": "ticket",
                    "outputSchema": {"type": "object"}
                },
                {
                    "name": "WaitForResponse",
                    "type": "timer",
                    "timerDuration": "5s"
                },
                {
                    "name": "SolveTicket",
                    "type": "activity",
                    "activityName": "SolveTicketAcitivity",
                    "input": "$.ticket",
                    "outputSchema": {"type": "object"}
                }
            ]
        }'::jsonb,
        'system'
    );
  "000004_insert_initial_workflow.down.sql": |
    -- Remove initial workflow configuration
    DELETE FROM configs.config_versions 
    WHERE name = 'SimpleWorkflow' AND version = '1.0';
  "000005_add_schema_column.up.sql": |
    -- Add schema column to config_versions table
    ALTER TABLE configs.config_versions 
    ADD COLUMN IF NOT EXISTS schema JSONB;

    -- Update existing SimpleWorkflow with the new schema
    UPDATE configs.config_versions 
    SET schema = '{
        "nodes": [
            {
                "id": "step-1747296656224",
                "type": "activity",
                "data": {
                    "label": "GetOrCreateTicket",
                    "activityName": "GetOrCreateTicketActivity",
                    "timerDuration": "",
                    "signalName": "",
                    "argIn": ["message"],
                    "argOut": ["ticket"],
                    "description": "Создать или получить тикет",
                    "input": {
                        "message": "$.input.Message"
                    },
                    "output": {
                        "ticket": "ticket"
                    }
                },
                "position": {
                    "x": 23.720213298347588,
                    "y": -8.46597968371043
                }
            },
            {
                "id": "step-1747296657141",
                "type": "activity",
                "data": {
                    "label": "AddInitialMessage",
                    "activityName": "AddMassageToTicketActivity",
                    "timerDuration": "",
                    "signalName": "",
                    "argIn": ["message", "ticketId"],
                    "argOut": ["ticket"],
                    "description": "Добавить первое сообщение",
                    "input": {
                        "message": "$.input.Message",
                        "ticketId": "$.ticket.Id"
                    },
                    "output": {
                        "ticket": "ticket"
                    }
                },
                "position": {
                    "x": 418.4195143096235,
                    "y": -45.76866758669604
                }
            },
            {
                "id": "step-1747297690439",
                "type": "signal",
                "data": {
                    "label": "Signal",
                    "activityName": "",
                    "timerDuration": "",
                    "signalName": "NewMessage",
                    "argIn": [],
                    "argOut": [],
                    "description": "Сигнал внешнего события",
                    "input": {},
                    "output": {}
                },
                "position": {
                    "x": 764.3720544784059,
                    "y": -16.304013845826624
                }
            },
            {
                "id": "step-1747297694553",
                "type": "activity",
                "data": {
                    "label": "ClassifyTicket",
                    "activityName": "ClassifierAcitivity",
                    "timerDuration": "",
                    "signalName": "",
                    "argIn": ["ticket"],
                    "argOut": ["ticket"],
                    "description": "Классификация тикета",
                    "input": {
                        "ticket": "$.ticket"
                    },
                    "output": {
                        "ticket": "ticket"
                    }
                },
                "position": {
                    "x": 1015.8841680504928,
                    "y": -55.10207392299451
                }
            },
            {
                "id": "step-1747297695629",
                "type": "timer",
                "data": {
                    "label": "Timer",
                    "activityName": "",
                    "timerDuration": "",
                    "signalName": "",
                    "argIn": ["timerDuration"],
                    "argOut": [],
                    "description": "Таймер ожидания",
                    "input": {
                        "timerDuration": "3s"
                    },
                    "output": {}
                },
                "position": {
                    "x": 1359.221801753839,
                    "y": -30.114927913195093
                }
            },
            {
                "id": "step-1747297696431",
                "type": "activity",
                "data": {
                    "label": "SolveTicket",
                    "activityName": "SolveTicketAcitivity",
                    "timerDuration": "",
                    "signalName": "",
                    "argIn": ["ticket"],
                    "argOut": ["ticket"],
                    "description": "Решить тикет",
                    "input": {
                        "ticket": "$.ticket"
                    },
                    "output": {
                        "ticket": "ticket"
                    }
                },
                "position": {
                    "x": 1784.6362086173442,
                    "y": -84.65512884098544
                }
            }
        ],
        "edges": [
            {
                "id": "reactflow__edge-step-1747296656224-step-1747296657141",
                "source": "step-1747296656224",
                "target": "step-1747296657141"
            },
            {
                "id": "reactflow__edge-step-1747296657141-step-1747297690439",
                "source": "step-1747296657141",
                "target": "step-1747297690439"
            },
            {
                "id": "reactflow__edge-step-1747297690439-step-1747297694553",
                "source": "step-1747297690439",
                "target": "step-1747297694553"
            },
            {
                "id": "reactflow__edge-step-1747297694553-step-1747297695629",
                "source": "step-1747297694553",
                "target": "step-1747297695629"
            },
            {
                "id": "reactflow__edge-step-1747297695629-step-1747297696431",
                "source": "step-1747297695629",
                "target": "step-1747297696431"
            }
        ]
    }'::jsonb
    WHERE name = 'SimpleWorkflow' AND version = '1.0';
  "000005_add_schema_column.down.sql": |
    -- Remove schema column from config_versions table
    ALTER TABLE configs.config_versions 
    DROP COLUMN IF EXISTS schema; 