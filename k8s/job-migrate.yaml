apiVersion: batch/v1
kind: Job
metadata:
  name: migrate-db
spec:
  template:
    spec:
      containers:
        - name: migrate
          image: migrate/migrate
          args:
            - -path=/migrations
            - -database=postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?sslmode=disable
            - up
          env:
            - name: POSTGRES_HOST
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_DB
              value: service_tickets
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: migrations
              mountPath: /migrations
      volumes:
        - name: migrations
          configMap:
            name: migrations-config
      restartPolicy: Never
  backoffLimit: 4
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: migrations-config
data:
  "000001_create_tickets_table.up.sql": |
    CREATE TABLE IF NOT EXISTS tickets (
        id VARCHAR(36) PRIMARY KEY,
        status VARCHAR(50) NOT NULL,
        "user" VARCHAR(255) NOT NULL,
        agent VARCHAR(255),
        problem_id BIGINT,
        vertical_id BIGINT,
        skill_id BIGINT,
        user_group_id BIGINT,
        channel VARCHAR(50) NOT NULL,
        created_at TIMESTAMP NOT NULL,
        updated_at TIMESTAMP NOT NULL
    );

    -- Add indexes for frequently queried fields
    CREATE INDEX IF NOT EXISTS idx_tickets_status ON tickets(status);
    CREATE INDEX IF NOT EXISTS idx_tickets_user ON tickets("user");
    CREATE INDEX IF NOT EXISTS idx_tickets_agent ON tickets(agent);
    CREATE INDEX IF NOT EXISTS idx_tickets_problem_id ON tickets(problem_id);
    CREATE INDEX IF NOT EXISTS idx_tickets_vertical_id ON tickets(vertical_id);
    CREATE INDEX IF NOT EXISTS idx_tickets_skill_id ON tickets(skill_id);
    CREATE INDEX IF NOT EXISTS idx_tickets_user_group_id ON tickets(user_group_id);
    CREATE INDEX IF NOT EXISTS idx_tickets_channel ON tickets(channel);
    CREATE INDEX IF NOT EXISTS idx_tickets_created_at ON tickets(created_at);
    CREATE INDEX IF NOT EXISTS idx_tickets_updated_at ON tickets(updated_at);
  "000001_create_tickets_table.down.sql": |
    DROP TABLE IF EXISTS tickets;
  "000002_create_messages_table.up.sql": |
    CREATE TABLE IF NOT EXISTS messages (
        id VARCHAR(36) PRIMARY KEY,
        ticket_id VARCHAR(36) NOT NULL,
        from_address VARCHAR(255) NOT NULL,
        to_address VARCHAR(255) NOT NULL,
        subject TEXT,
        body TEXT,
        channel VARCHAR(20) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE
    );

    -- Add indexes for frequently queried fields
    CREATE INDEX IF NOT EXISTS idx_messages_ticket_id ON messages(ticket_id);
    CREATE INDEX IF NOT EXISTS idx_messages_from_address ON messages(from_address);
    CREATE INDEX IF NOT EXISTS idx_messages_to_address ON messages(to_address);
    CREATE INDEX IF NOT EXISTS idx_messages_channel ON messages(channel);
    CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);
  "000002_create_messages_table.down.sql": |
    DROP TABLE IF EXISTS messages; 